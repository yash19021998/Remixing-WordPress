/**
 * @remix-run/dev v1.4.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var tsConfigLoader = require('./tsConfigLoader.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);

function loadTsConfig(cwd = process.cwd()) {
  return configLoader({
    cwd: cwd
  });
}
function configLoader({
  cwd
}) {
  // Load tsconfig and create path matching function
  let loadResult = tsConfigLoader.tsConfigLoader({
    cwd,
    getEnv: key => process.env[key]
  });

  if (!loadResult.tsConfigPath) {
    return {
      resultType: "failed",
      message: "Couldn't find tsconfig.json"
    };
  }

  if (!loadResult.baseUrl) {
    return {
      resultType: "failed",
      message: "Missing baseUrl in compilerOptions"
    };
  }

  let tsConfigDir = path__namespace.dirname(loadResult.tsConfigPath);
  let absoluteBaseUrl = path__namespace.join(tsConfigDir, loadResult.baseUrl);
  return {
    resultType: "success",
    configFileAbsolutePath: loadResult.tsConfigPath,
    baseUrl: loadResult.baseUrl,
    absoluteBaseUrl,
    paths: loadResult.paths || {}
  };
}

exports.configLoader = configLoader;
exports.loadTsConfig = loadTsConfig;
