/**
 * @remix-run/dev v1.4.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var fse = require('fs-extra');
var JSON5 = require('json5');
var prettier = require('prettier');
var colors = require('../../../colors.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);
var fse__default = /*#__PURE__*/_interopDefaultLegacy(fse);
var JSON5__default = /*#__PURE__*/_interopDefaultLegacy(JSON5);
var prettier__default = /*#__PURE__*/_interopDefaultLegacy(prettier);

// tsconfig.json

let suggestedCompilerOptions = {
  forceConsistentCasingInFileNames: true,
  target: "es2019",
  lib: ["DOM", "DOM.Iterable", "ES2019"],
  allowJs: true,
  strict: true,
  paths: {
    "~/*": ["./app/*"]
  }
}; // These values are required and cannot be changed by the user
// Keep this in sync with esbuild

let requiredCompilerOptions = {
  esModuleInterop: true,
  isolatedModules: true,
  jsx: "react-jsx",
  moduleResolution: "node",
  resolveJsonModule: true,
  noEmit: true
}; // taken from https://github.com/sindresorhus/ts-extras/blob/781044f0412ec4a4224a1b9abce5ff0eacee3e72/source/object-keys.ts

function objectKeys(value) {
  return Object.keys(value);
}

function writeConfigDefaults(configPath) {
  let configContents = fse__default["default"].readFileSync(configPath, "utf-8");
  let config = JSON5__default["default"].parse(configContents);
  let configType = path__namespace.basename(configPath);

  if (!config.compilerOptions) {
    config.compilerOptions = {};
  }

  let suggestedChanges = [];
  let requiredChanges = [];

  if (!("include" in config)) {
    config.include = ["remix.env.d.ts", "**/*.ts", "**/*.tsx"];
    suggestedChanges.push(colors.blue("include") + " was set to " + colors.bold(`['remix.env.d.ts', '**/*.ts', '**/*.tsx']`));
  } // TODO: check for user's typescript version and only add baseUrl if < 4.1


  if (!("baseUrl" in config.compilerOptions)) {
    let baseUrl = path__namespace.relative(process.cwd(), path__namespace.dirname(configPath)) || ".";
    config.compilerOptions.baseUrl = baseUrl;
    requiredChanges.push(colors.blue("compilerOptions.baseUrl") + " was set to " + colors.bold(`'${baseUrl}'`));
  }

  for (let key of objectKeys(suggestedCompilerOptions)) {
    if (!(key in config.compilerOptions)) {
      config.compilerOptions[key] = suggestedCompilerOptions[key];
      suggestedChanges.push(colors.blue("compilerOptions." + key) + " was set to " + colors.bold(`'${suggestedCompilerOptions[key]}'`));
    }
  }

  for (let key of objectKeys(requiredCompilerOptions)) {
    if (config.compilerOptions[key] !== requiredCompilerOptions[key]) {
      config.compilerOptions[key] = requiredCompilerOptions[key];
      requiredChanges.push(colors.blue("compilerOptions." + key) + " was set to " + colors.bold(`'${requiredCompilerOptions[key]}'`));
    }
  }

  if (suggestedChanges.length > 0 || requiredChanges.length > 0) {
    fse__default["default"].writeFileSync(configPath, prettier__default["default"].format(JSON.stringify(config, null, 2), {
      parser: "json"
    }));
  }

  if (suggestedChanges.length > 0) {
    console.log(`The following suggested values were added to your ${colors.blue(`"${configType}"`)}. These values ${colors.bold("can be changed")} to fit your project's needs:\n`);
    suggestedChanges.forEach(change => console.log(`\t- ${change}`));
    console.log("");
  }

  if (requiredChanges.length > 0) {
    console.log(`The following ${colors.bold("mandatory changes")} were made to your ${colors.blue(configType)}:\n`);
    requiredChanges.forEach(change => console.log(`\t- ${change}`));
    console.log("");
  }
}

exports.writeConfigDefaults = writeConfigDefaults;
