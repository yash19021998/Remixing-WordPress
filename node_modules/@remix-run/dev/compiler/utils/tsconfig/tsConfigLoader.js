/**
 * @remix-run/dev v1.4.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var path = require('path');
var fs = require('fs');
var JSON5 = require('json5');
var stripBom = require('strip-bom');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var path__namespace = /*#__PURE__*/_interopNamespace(path);
var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
var JSON5__default = /*#__PURE__*/_interopDefaultLegacy(JSON5);
var stripBom__default = /*#__PURE__*/_interopDefaultLegacy(stripBom);

/**
 * Typing for the parts of tsconfig that we care about
 */

function tsConfigLoader({
  cwd
}) {
  let loadResult = loadSync(cwd);
  return loadResult;
}

function loadSync(cwd) {
  // Tsconfig.loadSync uses path.resolve. This is why we can use an absolute path as filename
  let configPath = resolveConfigPath(cwd);

  if (!configPath) {
    return {
      tsConfigPath: undefined,
      baseUrl: undefined,
      paths: undefined
    };
  }

  let config = parseTsConfig(configPath);
  return {
    tsConfigPath: configPath,
    baseUrl: config && config.compilerOptions && config.compilerOptions.baseUrl,
    paths: config && config.compilerOptions && config.compilerOptions.paths
  };
}

function resolveConfigPath(cwd) {
  if (fs__namespace.statSync(cwd).isFile()) {
    return path__namespace.resolve(cwd);
  }

  let configAbsolutePath = walkForTsConfig(cwd);
  return configAbsolutePath ? path__namespace.resolve(configAbsolutePath) : undefined;
}

function walkForTsConfig(directory, existsSync = fs__namespace.existsSync) {
  let configPath = path__namespace.join(directory, "./tsconfig.json");

  if (existsSync(configPath)) {
    return configPath;
  }

  configPath = path__namespace.join(directory, "./jsconfig.json");

  if (existsSync(configPath)) {
    return configPath;
  }

  let parentDirectory = path__namespace.join(directory, "../"); // If we reached the top

  if (directory === parentDirectory) {
    return undefined;
  }

  return walkForTsConfig(parentDirectory, existsSync);
}

function parseTsConfig(configFilePath, existsSync = fs__namespace.existsSync, readFileSync = filename => fs__namespace.readFileSync(filename, "utf8")) {
  if (!existsSync(configFilePath)) {
    return undefined;
  }

  let configString = readFileSync(configFilePath);
  let cleanedJson = stripBom__default["default"](configString);
  let config = JSON5__default["default"].parse(cleanedJson);
  let extendedConfig = config.extends;

  if (extendedConfig) {
    if (typeof extendedConfig === "string" && extendedConfig.indexOf(".json") === -1) {
      extendedConfig += ".json";
    }

    let currentDir = path__namespace.dirname(configFilePath);
    let extendedConfigPath = path__namespace.join(currentDir, extendedConfig);

    if (extendedConfig.indexOf("/") !== -1 && extendedConfig.indexOf(".") !== -1 && !existsSync(extendedConfigPath)) {
      extendedConfigPath = path__namespace.join(currentDir, "node_modules", extendedConfig);
    }

    let base = parseTsConfig(extendedConfigPath, existsSync, readFileSync) || {}; // baseUrl should be interpreted as relative to the base tsconfig,
    // but we need to update it so it is relative to the original tsconfig being loaded

    if (base.compilerOptions && base.compilerOptions.baseUrl) {
      let extendsDir = path__namespace.dirname(extendedConfig);
      base.compilerOptions.baseUrl = path__namespace.join(extendsDir, base.compilerOptions.baseUrl);
    }

    return { ...base,
      ...config,
      compilerOptions: { ...base.compilerOptions,
        ...config.compilerOptions
      }
    };
  }

  return config;
}

exports.tsConfigLoader = tsConfigLoader;
